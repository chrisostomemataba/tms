# Generated by Django 4.2.7 on 2024-10-30 15:47

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("users", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Assignment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("instructions", models.TextField()),
                (
                    "due_days",
                    models.PositiveIntegerField(
                        help_text="Days to complete after assignment"
                    ),
                ),
                (
                    "passing_score",
                    models.PositiveIntegerField(
                        help_text="Minimum score to pass (percentage)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "max_attempts",
                    models.PositiveIntegerField(
                        default=1, help_text="Maximum number of attempts allowed"
                    ),
                ),
                (
                    "weight",
                    models.PositiveIntegerField(
                        default=100,
                        help_text="Weight in course grade (percentage)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["course", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(help_text="Course title", max_length=200)),
                (
                    "code",
                    models.CharField(
                        help_text="Unique course code", max_length=50, unique=True
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Detailed course description"),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("TECHNICAL", "Technical"),
                            ("SOFT_SKILLS", "Soft Skills"),
                            ("MANAGEMENT", "Management"),
                            ("COMPLIANCE", "Compliance"),
                            ("ONBOARDING", "Onboarding"),
                            ("PROFESSIONAL", "Professional Development"),
                        ],
                        help_text="Course category",
                        max_length=50,
                    ),
                ),
                (
                    "difficulty_level",
                    models.CharField(
                        choices=[
                            ("BEGINNER", "Beginner"),
                            ("INTERMEDIATE", "Intermediate"),
                            ("ADVANCED", "Advanced"),
                            ("EXPERT", "Expert"),
                        ],
                        help_text="Course difficulty level",
                        max_length=20,
                    ),
                ),
                (
                    "delivery_method",
                    models.CharField(
                        choices=[
                            ("SELF_PACED", "Self-paced"),
                            ("INSTRUCTOR_LED", "Instructor-led"),
                            ("BLENDED", "Blended"),
                            ("LIVE_ONLINE", "Live Online"),
                            ("WORKSHOP", "Workshop"),
                        ],
                        help_text="Course delivery method",
                        max_length=20,
                    ),
                ),
                (
                    "duration_hours",
                    models.PositiveIntegerField(help_text="Expected duration in hours"),
                ),
                (
                    "max_participants",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum number of participants (null for unlimited)",
                        null=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether the course is currently active"
                    ),
                ),
                (
                    "is_certificate_provided",
                    models.BooleanField(
                        default=True,
                        help_text="Whether a certificate is provided upon completion",
                    ),
                ),
                (
                    "auto_enrollment",
                    models.BooleanField(
                        default=False, help_text="Whether users can enroll themselves"
                    ),
                ),
                (
                    "completion_criteria",
                    models.JSONField(
                        default=dict, help_text="Criteria for course completion"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "published_at",
                    models.DateTimeField(
                        blank=True, help_text="When the course was published", null=True
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created the course",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="courses_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "instructors",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Course instructors",
                        related_name="courses_teaching",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "prerequisites",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Prerequisite courses",
                        related_name="dependent_courses",
                        to="courses.course",
                    ),
                ),
                (
                    "required_skills",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Required skills for this course",
                        related_name="required_for_courses",
                        to="users.skill",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "permissions": [
                    ("can_publish_course", "Can publish course"),
                    ("can_assign_instructors", "Can assign instructors"),
                ],
            },
        ),
        migrations.CreateModel(
            name="Enrollment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("APPROVED", "Approved"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("WITHDRAWN", "Withdrawn"),
                            ("FAILED", "Failed"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("enrolled_at", models.DateTimeField(auto_now_add=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("due_date", models.DateTimeField(blank=True, null=True)),
                (
                    "completion_percentage",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "grade",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("certificate_issued", models.BooleanField(default=False)),
                ("certificate_issued_at", models.DateTimeField(blank=True, null=True)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enrollments",
                        to="courses.course",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enrollments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-enrolled_at"],
            },
        ),
        migrations.CreateModel(
            name="LiveSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                (
                    "max_participants",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "meeting_url",
                    models.URLField(blank=True, help_text="URL for virtual session"),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        help_text="Physical location if applicable",
                        max_length=200,
                    ),
                ),
                (
                    "materials",
                    models.JSONField(
                        default=list, help_text="Session materials and resources"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("SCHEDULED", "Scheduled"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="SCHEDULED",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="live_sessions",
                        to="courses.course",
                    ),
                ),
                (
                    "instructor",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="teaching_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["start_time"],
            },
        ),
        migrations.CreateModel(
            name="Module",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "order",
                    models.PositiveIntegerField(help_text="Order within the course"),
                ),
                (
                    "duration_hours",
                    models.PositiveIntegerField(help_text="Expected duration in hours"),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this module is required for course completion",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="modules",
                        to="courses.course",
                    ),
                ),
            ],
            options={
                "ordering": ["course", "order"],
            },
        ),
        migrations.CreateModel(
            name="Lesson",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "content_type",
                    models.CharField(
                        choices=[
                            ("VIDEO", "Video"),
                            ("DOCUMENT", "Document"),
                            ("PRESENTATION", "Presentation"),
                            ("INTERACTIVE", "Interactive Content"),
                            ("EXTERNAL", "External Resource"),
                            ("LIVE_SESSION", "Live Session"),
                        ],
                        max_length=20,
                    ),
                ),
                ("content", models.JSONField(help_text="Lesson content and metadata")),
                (
                    "order",
                    models.PositiveIntegerField(help_text="Order within the module"),
                ),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(
                        help_text="Expected duration in minutes"
                    ),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this lesson is required for module completion",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "module",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lessons",
                        to="courses.module",
                    ),
                ),
            ],
            options={
                "ordering": ["module", "order"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalProgress",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("NOT_STARTED", "Not Started"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                        ],
                        default="NOT_STARTED",
                        max_length=20,
                    ),
                ),
                (
                    "progress_data",
                    models.JSONField(
                        default=dict, help_text="Detailed progress/interaction data"
                    ),
                ),
                (
                    "score",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("attempt_count", models.PositiveIntegerField(default=0)),
                (
                    "time_spent",
                    models.DurationField(
                        default=datetime.timedelta, help_text="Total time spent"
                    ),
                ),
                ("last_interaction", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "assignment",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="courses.assignment",
                    ),
                ),
                (
                    "enrollment",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="courses.enrollment",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lesson",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="courses.lesson",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical progress",
                "verbose_name_plural": "historical progresss",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalModule",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "order",
                    models.PositiveIntegerField(help_text="Order within the course"),
                ),
                (
                    "duration_hours",
                    models.PositiveIntegerField(help_text="Expected duration in hours"),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this module is required for course completion",
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="courses.course",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical module",
                "verbose_name_plural": "historical modules",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalLiveSession",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                (
                    "max_participants",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "meeting_url",
                    models.URLField(blank=True, help_text="URL for virtual session"),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        help_text="Physical location if applicable",
                        max_length=200,
                    ),
                ),
                (
                    "materials",
                    models.JSONField(
                        default=list, help_text="Session materials and resources"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("SCHEDULED", "Scheduled"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="SCHEDULED",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="courses.course",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "instructor",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical live session",
                "verbose_name_plural": "historical live sessions",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalLesson",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "content_type",
                    models.CharField(
                        choices=[
                            ("VIDEO", "Video"),
                            ("DOCUMENT", "Document"),
                            ("PRESENTATION", "Presentation"),
                            ("INTERACTIVE", "Interactive Content"),
                            ("EXTERNAL", "External Resource"),
                            ("LIVE_SESSION", "Live Session"),
                        ],
                        max_length=20,
                    ),
                ),
                ("content", models.JSONField(help_text="Lesson content and metadata")),
                (
                    "order",
                    models.PositiveIntegerField(help_text="Order within the module"),
                ),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(
                        help_text="Expected duration in minutes"
                    ),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this lesson is required for module completion",
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "module",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="courses.module",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical lesson",
                "verbose_name_plural": "historical lessons",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalEnrollment",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("APPROVED", "Approved"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("WITHDRAWN", "Withdrawn"),
                            ("FAILED", "Failed"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("enrolled_at", models.DateTimeField(blank=True, editable=False)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("due_date", models.DateTimeField(blank=True, null=True)),
                (
                    "completion_percentage",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "grade",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("certificate_issued", models.BooleanField(default=False)),
                ("certificate_issued_at", models.DateTimeField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="courses.course",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical enrollment",
                "verbose_name_plural": "historical enrollments",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalCourse",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("title", models.CharField(help_text="Course title", max_length=200)),
                (
                    "code",
                    models.CharField(
                        db_index=True, help_text="Unique course code", max_length=50
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Detailed course description"),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("TECHNICAL", "Technical"),
                            ("SOFT_SKILLS", "Soft Skills"),
                            ("MANAGEMENT", "Management"),
                            ("COMPLIANCE", "Compliance"),
                            ("ONBOARDING", "Onboarding"),
                            ("PROFESSIONAL", "Professional Development"),
                        ],
                        help_text="Course category",
                        max_length=50,
                    ),
                ),
                (
                    "difficulty_level",
                    models.CharField(
                        choices=[
                            ("BEGINNER", "Beginner"),
                            ("INTERMEDIATE", "Intermediate"),
                            ("ADVANCED", "Advanced"),
                            ("EXPERT", "Expert"),
                        ],
                        help_text="Course difficulty level",
                        max_length=20,
                    ),
                ),
                (
                    "delivery_method",
                    models.CharField(
                        choices=[
                            ("SELF_PACED", "Self-paced"),
                            ("INSTRUCTOR_LED", "Instructor-led"),
                            ("BLENDED", "Blended"),
                            ("LIVE_ONLINE", "Live Online"),
                            ("WORKSHOP", "Workshop"),
                        ],
                        help_text="Course delivery method",
                        max_length=20,
                    ),
                ),
                (
                    "duration_hours",
                    models.PositiveIntegerField(help_text="Expected duration in hours"),
                ),
                (
                    "max_participants",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum number of participants (null for unlimited)",
                        null=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether the course is currently active"
                    ),
                ),
                (
                    "is_certificate_provided",
                    models.BooleanField(
                        default=True,
                        help_text="Whether a certificate is provided upon completion",
                    ),
                ),
                (
                    "auto_enrollment",
                    models.BooleanField(
                        default=False, help_text="Whether users can enroll themselves"
                    ),
                ),
                (
                    "completion_criteria",
                    models.JSONField(
                        default=dict, help_text="Criteria for course completion"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "published_at",
                    models.DateTimeField(
                        blank=True, help_text="When the course was published", null=True
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who created the course",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical course",
                "verbose_name_plural": "historical courses",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalAssignment",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("instructions", models.TextField()),
                (
                    "due_days",
                    models.PositiveIntegerField(
                        help_text="Days to complete after assignment"
                    ),
                ),
                (
                    "passing_score",
                    models.PositiveIntegerField(
                        help_text="Minimum score to pass (percentage)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "max_attempts",
                    models.PositiveIntegerField(
                        default=1, help_text="Maximum number of attempts allowed"
                    ),
                ),
                (
                    "weight",
                    models.PositiveIntegerField(
                        default=100,
                        help_text="Weight in course grade (percentage)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="courses.course",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical assignment",
                "verbose_name_plural": "historical assignments",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name="assignment",
            name="course",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="assignments",
                to="courses.course",
            ),
        ),
        migrations.CreateModel(
            name="SessionAttendance",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("REGISTERED", "Registered"),
                            ("ATTENDED", "Attended"),
                            ("ABSENT", "Absent"),
                            ("EXCUSED", "Excused"),
                        ],
                        default="REGISTERED",
                        max_length=20,
                    ),
                ),
                ("join_time", models.DateTimeField(blank=True, null=True)),
                ("leave_time", models.DateTimeField(blank=True, null=True)),
                (
                    "attendance_duration",
                    models.DurationField(
                        blank=True, help_text="Total time attended", null=True
                    ),
                ),
                ("feedback", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attendance_records",
                        to="courses.livesession",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="session_attendance",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["session", "user"],
                "indexes": [
                    models.Index(
                        fields=["session", "status"],
                        name="courses_ses_session_0e27b1_idx",
                    ),
                    models.Index(
                        fields=["user", "status"], name="courses_ses_user_id_361540_idx"
                    ),
                ],
                "unique_together": {("session", "user")},
            },
        ),
        migrations.CreateModel(
            name="Progress",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("NOT_STARTED", "Not Started"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                        ],
                        default="NOT_STARTED",
                        max_length=20,
                    ),
                ),
                (
                    "progress_data",
                    models.JSONField(
                        default=dict, help_text="Detailed progress/interaction data"
                    ),
                ),
                (
                    "score",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("attempt_count", models.PositiveIntegerField(default=0)),
                (
                    "time_spent",
                    models.DurationField(
                        default=datetime.timedelta, help_text="Total time spent"
                    ),
                ),
                ("last_interaction", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assignment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="progress_records",
                        to="courses.assignment",
                    ),
                ),
                (
                    "enrollment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="progress_records",
                        to="courses.enrollment",
                    ),
                ),
                (
                    "lesson",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="progress_records",
                        to="courses.lesson",
                    ),
                ),
            ],
            options={
                "ordering": ["enrollment", "created_at"],
                "indexes": [
                    models.Index(
                        fields=["enrollment", "status"],
                        name="courses_pro_enrollm_78d497_idx",
                    ),
                    models.Index(
                        fields=["lesson", "status"],
                        name="courses_pro_lesson__2b0be6_idx",
                    ),
                    models.Index(
                        fields=["assignment", "status"],
                        name="courses_pro_assignm_15b569_idx",
                    ),
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="progress",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("assignment__isnull", True), ("lesson__isnull", False)),
                    models.Q(("assignment__isnull", False), ("lesson__isnull", True)),
                    _connector="OR",
                ),
                name="either_lesson_or_assignment",
            ),
        ),
        migrations.AddIndex(
            model_name="module",
            index=models.Index(
                fields=["course", "order"], name="courses_mod_course__20183c_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="module",
            unique_together={("course", "order")},
        ),
        migrations.AddIndex(
            model_name="livesession",
            index=models.Index(
                fields=["course", "start_time"], name="courses_liv_course__0f50ba_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="livesession",
            index=models.Index(
                fields=["instructor", "status"], name="courses_liv_instruc_1d515f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="lesson",
            index=models.Index(
                fields=["module", "order"], name="courses_les_module__4accd4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="lesson",
            index=models.Index(
                fields=["content_type"], name="courses_les_content_d3cec9_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="lesson",
            unique_together={("module", "order")},
        ),
        migrations.AddIndex(
            model_name="enrollment",
            index=models.Index(
                fields=["user", "course"], name="courses_enr_user_id_eb79d5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="enrollment",
            index=models.Index(
                fields=["status", "enrolled_at"], name="courses_enr_status_a26dae_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="enrollment",
            unique_together={("user", "course")},
        ),
        migrations.AddIndex(
            model_name="course",
            index=models.Index(
                fields=["category", "difficulty_level"],
                name="courses_cou_categor_ded77a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="course",
            index=models.Index(
                fields=["is_active", "published_at"],
                name="courses_cou_is_acti_1a4c78_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="course",
            index=models.Index(fields=["code"], name="courses_cou_code_612388_idx"),
        ),
        migrations.AddIndex(
            model_name="assignment",
            index=models.Index(
                fields=["course", "created_at"], name="courses_ass_course__c33d3d_idx"
            ),
        ),
    ]
